{"ast":null,"code":"import { InvalidAbiParametersError } from '../index.js';\nimport { isStructSignature, modifiers } from './runtime/signatures.js';\nimport { parseStructs } from './runtime/structs.js';\nimport { splitParameters } from './runtime/utils.js';\nimport { parseAbiParameter as parseAbiParameter_ } from './runtime/utils.js';\nexport function parseAbiParameters(params) {\n  const abiParameters = [];\n  if (typeof params === 'string') {\n    const parameters = splitParameters(params);\n    const length = parameters.length;\n    for (let i = 0; i < length; i++) {\n      abiParameters.push(parseAbiParameter_(parameters[i], {\n        modifiers\n      }));\n    }\n  } else {\n    const structs = parseStructs(params);\n    const length = params.length;\n    for (let i = 0; i < length; i++) {\n      const signature = params[i];\n      if (isStructSignature(signature)) continue;\n      const parameters = splitParameters(signature);\n      const length = parameters.length;\n      for (let k = 0; k < length; k++) {\n        abiParameters.push(parseAbiParameter_(parameters[k], {\n          modifiers,\n          structs\n        }));\n      }\n    }\n  }\n  if (abiParameters.length === 0) throw new InvalidAbiParametersError({\n    params\n  });\n  return abiParameters;\n}","map":{"version":3,"names":["InvalidAbiParametersError","isStructSignature","modifiers","parseStructs","splitParameters","parseAbiParameter","parseAbiParameter_","parseAbiParameters","params","abiParameters","parameters","length","i","push","structs","signature","k"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\Artica\\artica-repo\\frontend\\node_modules\\abitype\\src\\human-readable\\parseAbiParameters.ts"],"sourcesContent":["import type { AbiParameter } from '../abi.js'\r\nimport { InvalidAbiParametersError } from '../index.js'\r\nimport type { Narrow } from '../narrow.js'\r\nimport type { Error, Filter } from '../types.js'\r\nimport { isStructSignature, modifiers } from './runtime/signatures.js'\r\nimport { parseStructs } from './runtime/structs.js'\r\nimport { splitParameters } from './runtime/utils.js'\r\nimport { parseAbiParameter as parseAbiParameter_ } from './runtime/utils.js'\r\nimport type { IsStructSignature, Modifier } from './types/signatures.js'\r\nimport type { ParseStructs } from './types/structs.js'\r\nimport type { SplitParameters } from './types/utils.js'\r\nimport type { ParseAbiParameters as ParseAbiParameters_ } from './types/utils.js'\r\n\r\n/**\r\n * Parses human-readable ABI parameters into {@link AbiParameter}s\r\n *\r\n * @param TParams - Human-readable ABI parameters\r\n * @returns Parsed {@link AbiParameter}s\r\n *\r\n * @example\r\n * type Result = ParseAbiParameters('address from, address to, uint256 amount')\r\n * //   ^? type Result: [{ type: \"address\"; name: \"from\"; }, { type: \"address\";...\r\n *\r\n * @example\r\n * type Result = ParseAbiParameters<\r\n *   // ^? type Result: [{ type: \"tuple\"; components: [{ type: \"string\"; name:...\r\n *   ['Baz bar', 'struct Baz { string name; }']\r\n * >\r\n */\r\nexport type ParseAbiParameters<\r\n  TParams extends string | readonly string[] | readonly unknown[],\r\n> =\r\n  | (TParams extends string\r\n      ? TParams extends ''\r\n        ? never\r\n        : string extends TParams\r\n        ? readonly AbiParameter[]\r\n        : ParseAbiParameters_<SplitParameters<TParams>, { Modifier: Modifier }>\r\n      : never)\r\n  | (TParams extends readonly string[]\r\n      ? string[] extends TParams\r\n        ? AbiParameter // Return generic AbiParameter item since type was no inferrable\r\n        : ParseStructs<TParams> extends infer Structs\r\n        ? {\r\n            [K in keyof TParams]: TParams[K] extends string\r\n              ? IsStructSignature<TParams[K]> extends true\r\n                ? never\r\n                : ParseAbiParameters_<\r\n                    SplitParameters<TParams[K]>,\r\n                    { Modifier: Modifier; Structs: Structs }\r\n                  >\r\n              : never\r\n          } extends infer Mapped extends readonly unknown[]\r\n          ? Filter<Mapped, never>[0] extends infer Result\r\n            ? Result extends undefined\r\n              ? never\r\n              : Result\r\n            : never\r\n          : never\r\n        : never\r\n      : never)\r\n\r\n/**\r\n * Parses human-readable ABI parameters into {@link AbiParameter}s\r\n *\r\n * @param params - Human-readable ABI parameters\r\n * @returns Parsed {@link AbiParameter}s\r\n *\r\n * @example\r\n * const abiParameters = parseAbiParameters('address from, address to, uint256 amount')\r\n * //    ^? const abiParameters: [{ type: \"address\"; name: \"from\"; }, { type: \"address\";...\r\n *\r\n * @example\r\n * const abiParameters = parseAbiParameters([\r\n *   //  ^? const abiParameters: [{ type: \"tuple\"; components: [{ type: \"string\"; name:...\r\n *   'Baz bar',\r\n *   'struct Baz { string name; }',\r\n * ])\r\n */\r\nexport function parseAbiParameters<\r\n  TParams extends string | readonly string[] | readonly unknown[],\r\n>(\r\n  params: Narrow<TParams> &\r\n    (\r\n      | (TParams extends string\r\n          ? TParams extends ''\r\n            ? Error<'Empty string is not allowed.'>\r\n            : unknown\r\n          : never)\r\n      | (TParams extends readonly string[]\r\n          ? TParams extends readonly [] // empty array\r\n            ? Error<'At least one parameter required.'>\r\n            : string[] extends TParams\r\n            ? unknown\r\n            : unknown // TODO: Validate param string\r\n          : never)\r\n    ),\r\n): ParseAbiParameters<TParams> {\r\n  const abiParameters: AbiParameter[] = []\r\n  if (typeof params === 'string') {\r\n    const parameters = splitParameters(params)\r\n    const length = parameters.length\r\n    for (let i = 0; i < length; i++) {\r\n      abiParameters.push(parseAbiParameter_(parameters[i]!, { modifiers }))\r\n    }\r\n  } else {\r\n    const structs = parseStructs(params as readonly string[])\r\n    const length = params.length as number\r\n    for (let i = 0; i < length; i++) {\r\n      const signature = (params as readonly string[])[i]!\r\n      if (isStructSignature(signature)) continue\r\n      const parameters = splitParameters(signature)\r\n      const length = parameters.length\r\n      for (let k = 0; k < length; k++) {\r\n        abiParameters.push(\r\n          parseAbiParameter_(parameters[k]!, { modifiers, structs }),\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  if (abiParameters.length === 0)\r\n    throw new InvalidAbiParametersError({ params })\r\n\r\n  return abiParameters as ParseAbiParameters<TParams>\r\n}\r\n"],"mappings":"AACA,SAASA,yBAAyB,QAAQ,aAAa;AAGvD,SAASC,iBAAiB,EAAEC,SAAS,QAAQ,yBAAyB;AACtE,SAASC,YAAY,QAAQ,sBAAsB;AACnD,SAASC,eAAe,QAAQ,oBAAoB;AACpD,SAASC,iBAAiB,IAAIC,kBAAkB,QAAQ,oBAAoB;AAwE5E,OAAM,SAAUC,kBAAkBA,CAGhCC,MAcG;EAEH,MAAMC,aAAa,GAAmB,EAAE;EACxC,IAAI,OAAOD,MAAM,KAAK,QAAQ,EAAE;IAC9B,MAAME,UAAU,GAAGN,eAAe,CAACI,MAAM,CAAC;IAC1C,MAAMG,MAAM,GAAGD,UAAU,CAACC,MAAM;IAChC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,EAAEC,CAAC,EAAE,EAAE;MAC/BH,aAAa,CAACI,IAAI,CAACP,kBAAkB,CAACI,UAAU,CAACE,CAAC,CAAE,EAAE;QAAEV;MAAS,CAAE,CAAC,CAAC;;GAExE,MAAM;IACL,MAAMY,OAAO,GAAGX,YAAY,CAACK,MAA2B,CAAC;IACzD,MAAMG,MAAM,GAAGH,MAAM,CAACG,MAAgB;IACtC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,EAAEC,CAAC,EAAE,EAAE;MAC/B,MAAMG,SAAS,GAAIP,MAA4B,CAACI,CAAC,CAAE;MACnD,IAAIX,iBAAiB,CAACc,SAAS,CAAC,EAAE;MAClC,MAAML,UAAU,GAAGN,eAAe,CAACW,SAAS,CAAC;MAC7C,MAAMJ,MAAM,GAAGD,UAAU,CAACC,MAAM;MAChC,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,MAAM,EAAEK,CAAC,EAAE,EAAE;QAC/BP,aAAa,CAACI,IAAI,CAChBP,kBAAkB,CAACI,UAAU,CAACM,CAAC,CAAE,EAAE;UAAEd,SAAS;UAAEY;QAAO,CAAE,CAAC,CAC3D;;;;EAKP,IAAIL,aAAa,CAACE,MAAM,KAAK,CAAC,EAC5B,MAAM,IAAIX,yBAAyB,CAAC;IAAEQ;EAAM,CAAE,CAAC;EAEjD,OAAOC,aAA4C;AACrD"},"metadata":{},"sourceType":"module","externalDependencies":[]}