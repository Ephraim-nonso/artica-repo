{"ast":null,"code":"import { bytesRegex, execTyped, integerRegex, isTupleRegex } from '../../regex.js';\nimport { UnknownSolidityTypeError } from '../errors/abiItem.js';\nimport { InvalidFunctionModifierError, InvalidModifierError, InvalidParameterError, SolidityProtectedKeywordError } from '../errors/abiParameter.js';\nimport { InvalidSignatureError, UnknownSignatureError } from '../errors/signature.js';\nimport { InvalidParenthesisError } from '../errors/splitParameters.js';\nimport { getParameterCacheKey, parameterCache } from './cache.js';\nimport { eventModifiers, execConstructorSignature, execErrorSignature, execEventSignature, execFunctionSignature, functionModifiers, isConstructorSignature, isErrorSignature, isEventSignature, isFallbackSignature, isFunctionSignature, isReceiveSignature } from './signatures.js';\nexport function parseSignature(signature, structs = {}) {\n  if (isFunctionSignature(signature)) {\n    const match = execFunctionSignature(signature);\n    if (!match) throw new InvalidSignatureError({\n      signature,\n      type: 'function'\n    });\n    const inputParams = splitParameters(match.parameters);\n    const inputs = [];\n    const inputLength = inputParams.length;\n    for (let i = 0; i < inputLength; i++) {\n      inputs.push(parseAbiParameter(inputParams[i], {\n        modifiers: functionModifiers,\n        structs,\n        type: 'function'\n      }));\n    }\n    const outputs = [];\n    if (match.returns) {\n      const outputParams = splitParameters(match.returns);\n      const outputLength = outputParams.length;\n      for (let i = 0; i < outputLength; i++) {\n        outputs.push(parseAbiParameter(outputParams[i], {\n          modifiers: functionModifiers,\n          structs,\n          type: 'function'\n        }));\n      }\n    }\n    return {\n      name: match.name,\n      type: 'function',\n      stateMutability: match.stateMutability ?? 'nonpayable',\n      inputs,\n      outputs\n    };\n  }\n  if (isEventSignature(signature)) {\n    const match = execEventSignature(signature);\n    if (!match) throw new InvalidSignatureError({\n      signature,\n      type: 'event'\n    });\n    const params = splitParameters(match.parameters);\n    const abiParameters = [];\n    const length = params.length;\n    for (let i = 0; i < length; i++) {\n      abiParameters.push(parseAbiParameter(params[i], {\n        modifiers: eventModifiers,\n        structs,\n        type: 'event'\n      }));\n    }\n    return {\n      name: match.name,\n      type: 'event',\n      inputs: abiParameters\n    };\n  }\n  if (isErrorSignature(signature)) {\n    const match = execErrorSignature(signature);\n    if (!match) throw new InvalidSignatureError({\n      signature,\n      type: 'error'\n    });\n    const params = splitParameters(match.parameters);\n    const abiParameters = [];\n    const length = params.length;\n    for (let i = 0; i < length; i++) {\n      abiParameters.push(parseAbiParameter(params[i], {\n        structs,\n        type: 'error'\n      }));\n    }\n    return {\n      name: match.name,\n      type: 'error',\n      inputs: abiParameters\n    };\n  }\n  if (isConstructorSignature(signature)) {\n    const match = execConstructorSignature(signature);\n    if (!match) throw new InvalidSignatureError({\n      signature,\n      type: 'constructor'\n    });\n    const params = splitParameters(match.parameters);\n    const abiParameters = [];\n    const length = params.length;\n    for (let i = 0; i < length; i++) {\n      abiParameters.push(parseAbiParameter(params[i], {\n        structs,\n        type: 'constructor'\n      }));\n    }\n    return {\n      type: 'constructor',\n      stateMutability: match.stateMutability ?? 'nonpayable',\n      inputs: abiParameters\n    };\n  }\n  if (isFallbackSignature(signature)) return {\n    type: 'fallback'\n  };\n  if (isReceiveSignature(signature)) return {\n    type: 'receive',\n    stateMutability: 'payable'\n  };\n  throw new UnknownSignatureError({\n    signature\n  });\n}\nconst abiParameterWithoutTupleRegex = /^(?<type>[a-zA-Z$_][a-zA-Z0-9$_]*)(?<array>(?:\\[\\d*?\\])+?)?(?:\\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/;\nconst abiParameterWithTupleRegex = /^\\((?<type>.+?)\\)(?<array>(?:\\[\\d*?\\])+?)?(?:\\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/;\nconst dynamicIntegerRegex = /^u?int$/;\nexport function parseAbiParameter(param, options) {\n  const parameterCacheKey = getParameterCacheKey(param, options?.type);\n  if (parameterCache.has(parameterCacheKey)) return parameterCache.get(parameterCacheKey);\n  const isTuple = isTupleRegex.test(param);\n  const match = execTyped(isTuple ? abiParameterWithTupleRegex : abiParameterWithoutTupleRegex, param);\n  if (!match) throw new InvalidParameterError({\n    param\n  });\n  if (match.name && isSolidityKeyword(match.name)) throw new SolidityProtectedKeywordError({\n    param,\n    name: match.name\n  });\n  const name = match.name ? {\n    name: match.name\n  } : {};\n  const indexed = match.modifier === 'indexed' ? {\n    indexed: true\n  } : {};\n  const structs = options?.structs ?? {};\n  let type;\n  let components = {};\n  if (isTuple) {\n    type = 'tuple';\n    const params = splitParameters(match.type);\n    const components_ = [];\n    const length = params.length;\n    for (let i = 0; i < length; i++) {\n      components_.push(parseAbiParameter(params[i], {\n        structs\n      }));\n    }\n    components = {\n      components: components_\n    };\n  } else if (match.type in structs) {\n    type = 'tuple';\n    components = {\n      components: structs[match.type]\n    };\n  } else if (dynamicIntegerRegex.test(match.type)) {\n    type = `${match.type}256`;\n  } else {\n    type = match.type;\n    if (!(options?.type === 'struct') && !isSolidityType(type)) throw new UnknownSolidityTypeError({\n      type\n    });\n  }\n  if (match.modifier) {\n    if (!options?.modifiers?.has?.(match.modifier)) throw new InvalidModifierError({\n      param,\n      type: options?.type,\n      modifier: match.modifier\n    });\n    if (functionModifiers.has(match.modifier) && !isValidDataLocation(type, !!match.array)) throw new InvalidFunctionModifierError({\n      param,\n      type: options?.type,\n      modifier: match.modifier\n    });\n  }\n  const abiParameter = {\n    type: `${type}${match.array ?? ''}`,\n    ...name,\n    ...indexed,\n    ...components\n  };\n  parameterCache.set(parameterCacheKey, abiParameter);\n  return abiParameter;\n}\nexport function splitParameters(params, result = [], current = '', depth = 0) {\n  if (params === '') {\n    if (current === '') return result;\n    if (depth !== 0) throw new InvalidParenthesisError({\n      current,\n      depth\n    });\n    result.push(current.trim());\n    return result;\n  }\n  const length = params.length;\n  for (let i = 0; i < length; i++) {\n    const char = params[i];\n    const tail = params.slice(i + 1);\n    switch (char) {\n      case ',':\n        return depth === 0 ? splitParameters(tail, [...result, current.trim()]) : splitParameters(tail, result, `${current}${char}`, depth);\n      case '(':\n        return splitParameters(tail, result, `${current}${char}`, depth + 1);\n      case ')':\n        return splitParameters(tail, result, `${current}${char}`, depth - 1);\n      default:\n        return splitParameters(tail, result, `${current}${char}`, depth);\n    }\n  }\n  return [];\n}\nexport function isSolidityType(type) {\n  return type === 'address' || type === 'bool' || type === 'function' || type === 'string' || bytesRegex.test(type) || integerRegex.test(type);\n}\nconst protectedKeywordsRegex = /^(?:after|alias|anonymous|apply|auto|byte|calldata|case|catch|constant|copyof|default|defined|error|event|external|false|final|function|immutable|implements|in|indexed|inline|internal|let|mapping|match|memory|mutable|null|of|override|partial|private|promise|public|pure|reference|relocatable|return|returns|sizeof|static|storage|struct|super|supports|switch|this|true|try|typedef|typeof|var|view|virtual)$/;\nexport function isSolidityKeyword(name) {\n  return name === 'address' || name === 'bool' || name === 'function' || name === 'string' || name === 'tuple' || bytesRegex.test(name) || integerRegex.test(name) || protectedKeywordsRegex.test(name);\n}\nexport function isValidDataLocation(type, isArray) {\n  return isArray || type === 'bytes' || type === 'string' || type === 'tuple';\n}","map":{"version":3,"names":["bytesRegex","execTyped","integerRegex","isTupleRegex","UnknownSolidityTypeError","InvalidFunctionModifierError","InvalidModifierError","InvalidParameterError","SolidityProtectedKeywordError","InvalidSignatureError","UnknownSignatureError","InvalidParenthesisError","getParameterCacheKey","parameterCache","eventModifiers","execConstructorSignature","execErrorSignature","execEventSignature","execFunctionSignature","functionModifiers","isConstructorSignature","isErrorSignature","isEventSignature","isFallbackSignature","isFunctionSignature","isReceiveSignature","parseSignature","signature","structs","match","type","inputParams","splitParameters","parameters","inputs","inputLength","length","i","push","parseAbiParameter","modifiers","outputs","returns","outputParams","outputLength","name","stateMutability","params","abiParameters","abiParameterWithoutTupleRegex","abiParameterWithTupleRegex","dynamicIntegerRegex","param","options","parameterCacheKey","has","get","isTuple","test","isSolidityKeyword","indexed","modifier","components","components_","isSolidityType","isValidDataLocation","array","abiParameter","set","result","current","depth","trim","char","tail","slice","protectedKeywordsRegex","isArray"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\Artica\\artica-repo\\frontend\\node_modules\\abitype\\src\\human-readable\\runtime\\utils.ts"],"sourcesContent":["import type {\r\n  AbiItemType,\r\n  AbiType,\r\n  SolidityArray,\r\n  SolidityBytes,\r\n  SolidityString,\r\n  SolidityTuple,\r\n} from '../../abi.js'\r\nimport {\r\n  bytesRegex,\r\n  execTyped,\r\n  integerRegex,\r\n  isTupleRegex,\r\n} from '../../regex.js'\r\nimport { UnknownSolidityTypeError } from '../errors/abiItem.js'\r\nimport {\r\n  InvalidFunctionModifierError,\r\n  InvalidModifierError,\r\n  InvalidParameterError,\r\n  SolidityProtectedKeywordError,\r\n} from '../errors/abiParameter.js'\r\nimport {\r\n  InvalidSignatureError,\r\n  UnknownSignatureError,\r\n} from '../errors/signature.js'\r\nimport { InvalidParenthesisError } from '../errors/splitParameters.js'\r\nimport type { FunctionModifier, Modifier } from '../types/signatures.js'\r\nimport type { StructLookup } from '../types/structs.js'\r\nimport { getParameterCacheKey, parameterCache } from './cache.js'\r\nimport {\r\n  eventModifiers,\r\n  execConstructorSignature,\r\n  execErrorSignature,\r\n  execEventSignature,\r\n  execFunctionSignature,\r\n  functionModifiers,\r\n  isConstructorSignature,\r\n  isErrorSignature,\r\n  isEventSignature,\r\n  isFallbackSignature,\r\n  isFunctionSignature,\r\n  isReceiveSignature,\r\n} from './signatures.js'\r\n\r\nexport function parseSignature(signature: string, structs: StructLookup = {}) {\r\n  if (isFunctionSignature(signature)) {\r\n    const match = execFunctionSignature(signature)\r\n    if (!match) throw new InvalidSignatureError({ signature, type: 'function' })\r\n\r\n    const inputParams = splitParameters(match.parameters)\r\n    const inputs = []\r\n    const inputLength = inputParams.length\r\n    for (let i = 0; i < inputLength; i++) {\r\n      inputs.push(\r\n        parseAbiParameter(inputParams[i]!, {\r\n          modifiers: functionModifiers,\r\n          structs,\r\n          type: 'function',\r\n        }),\r\n      )\r\n    }\r\n\r\n    const outputs = []\r\n    if (match.returns) {\r\n      const outputParams = splitParameters(match.returns)\r\n      const outputLength = outputParams.length\r\n      for (let i = 0; i < outputLength; i++) {\r\n        outputs.push(\r\n          parseAbiParameter(outputParams[i]!, {\r\n            modifiers: functionModifiers,\r\n            structs,\r\n            type: 'function',\r\n          }),\r\n        )\r\n      }\r\n    }\r\n\r\n    return {\r\n      name: match.name,\r\n      type: 'function',\r\n      stateMutability: match.stateMutability ?? 'nonpayable',\r\n      inputs,\r\n      outputs,\r\n    }\r\n  }\r\n\r\n  if (isEventSignature(signature)) {\r\n    const match = execEventSignature(signature)\r\n    if (!match) throw new InvalidSignatureError({ signature, type: 'event' })\r\n\r\n    const params = splitParameters(match.parameters)\r\n    const abiParameters = []\r\n    const length = params.length\r\n    for (let i = 0; i < length; i++) {\r\n      abiParameters.push(\r\n        parseAbiParameter(params[i]!, {\r\n          modifiers: eventModifiers,\r\n          structs,\r\n          type: 'event',\r\n        }),\r\n      )\r\n    }\r\n    return { name: match.name, type: 'event', inputs: abiParameters }\r\n  }\r\n\r\n  if (isErrorSignature(signature)) {\r\n    const match = execErrorSignature(signature)\r\n    if (!match) throw new InvalidSignatureError({ signature, type: 'error' })\r\n\r\n    const params = splitParameters(match.parameters)\r\n    const abiParameters = []\r\n    const length = params.length\r\n    for (let i = 0; i < length; i++) {\r\n      abiParameters.push(\r\n        parseAbiParameter(params[i]!, { structs, type: 'error' }),\r\n      )\r\n    }\r\n    return { name: match.name, type: 'error', inputs: abiParameters }\r\n  }\r\n\r\n  if (isConstructorSignature(signature)) {\r\n    const match = execConstructorSignature(signature)\r\n    if (!match)\r\n      throw new InvalidSignatureError({ signature, type: 'constructor' })\r\n\r\n    const params = splitParameters(match.parameters)\r\n    const abiParameters = []\r\n    const length = params.length\r\n    for (let i = 0; i < length; i++) {\r\n      abiParameters.push(\r\n        parseAbiParameter(params[i]!, { structs, type: 'constructor' }),\r\n      )\r\n    }\r\n    return {\r\n      type: 'constructor',\r\n      stateMutability: match.stateMutability ?? 'nonpayable',\r\n      inputs: abiParameters,\r\n    }\r\n  }\r\n\r\n  if (isFallbackSignature(signature)) return { type: 'fallback' }\r\n  if (isReceiveSignature(signature))\r\n    return {\r\n      type: 'receive',\r\n      stateMutability: 'payable',\r\n    }\r\n\r\n  throw new UnknownSignatureError({ signature })\r\n}\r\n\r\nconst abiParameterWithoutTupleRegex =\r\n  /^(?<type>[a-zA-Z$_][a-zA-Z0-9$_]*)(?<array>(?:\\[\\d*?\\])+?)?(?:\\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/\r\nconst abiParameterWithTupleRegex =\r\n  /^\\((?<type>.+?)\\)(?<array>(?:\\[\\d*?\\])+?)?(?:\\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/\r\nconst dynamicIntegerRegex = /^u?int$/\r\n\r\ntype ParseOptions = {\r\n  modifiers?: Set<Modifier>\r\n  structs?: StructLookup\r\n  type?: AbiItemType | 'struct'\r\n}\r\n\r\nexport function parseAbiParameter(param: string, options?: ParseOptions) {\r\n  // optional namespace cache by `type`\r\n  const parameterCacheKey = getParameterCacheKey(param, options?.type)\r\n  if (parameterCache.has(parameterCacheKey))\r\n    return parameterCache.get(parameterCacheKey)!\r\n\r\n  const isTuple = isTupleRegex.test(param)\r\n  const match = execTyped<{\r\n    array?: string\r\n    modifier?: Modifier\r\n    name?: string\r\n    type: string\r\n  }>(\r\n    isTuple ? abiParameterWithTupleRegex : abiParameterWithoutTupleRegex,\r\n    param,\r\n  )\r\n  if (!match) throw new InvalidParameterError({ param })\r\n\r\n  if (match.name && isSolidityKeyword(match.name))\r\n    throw new SolidityProtectedKeywordError({ param, name: match.name })\r\n\r\n  const name = match.name ? { name: match.name } : {}\r\n  const indexed = match.modifier === 'indexed' ? { indexed: true } : {}\r\n  const structs = options?.structs ?? {}\r\n  let type: string\r\n  let components = {}\r\n  if (isTuple) {\r\n    type = 'tuple'\r\n    const params = splitParameters(match.type)\r\n    const components_ = []\r\n    const length = params.length\r\n    for (let i = 0; i < length; i++) {\r\n      // remove `modifiers` from `options` to prevent from being added to tuple components\r\n      components_.push(parseAbiParameter(params[i]!, { structs }))\r\n    }\r\n    components = { components: components_ }\r\n  } else if (match.type in structs) {\r\n    type = 'tuple'\r\n    components = { components: structs[match.type] }\r\n  } else if (dynamicIntegerRegex.test(match.type)) {\r\n    type = `${match.type}256`\r\n  } else {\r\n    type = match.type\r\n    if (!(options?.type === 'struct') && !isSolidityType(type))\r\n      throw new UnknownSolidityTypeError({ type })\r\n  }\r\n\r\n  if (match.modifier) {\r\n    // Check if modifier exists, but is not allowed (e.g. `indexed` in `functionModifiers`)\r\n    if (!options?.modifiers?.has?.(match.modifier))\r\n      throw new InvalidModifierError({\r\n        param,\r\n        type: options?.type,\r\n        modifier: match.modifier,\r\n      })\r\n\r\n    // Check if resolved `type` is valid if there is a function modifier\r\n    if (\r\n      functionModifiers.has(match.modifier as FunctionModifier) &&\r\n      !isValidDataLocation(type, !!match.array)\r\n    )\r\n      throw new InvalidFunctionModifierError({\r\n        param,\r\n        type: options?.type,\r\n        modifier: match.modifier,\r\n      })\r\n  }\r\n\r\n  const abiParameter = {\r\n    type: `${type}${match.array ?? ''}`,\r\n    ...name,\r\n    ...indexed,\r\n    ...components,\r\n  }\r\n  parameterCache.set(parameterCacheKey, abiParameter)\r\n  return abiParameter\r\n}\r\n\r\n// s/o latika for this\r\nexport function splitParameters(\r\n  params: string,\r\n  result: string[] = [],\r\n  current = '',\r\n  depth = 0,\r\n): readonly string[] {\r\n  if (params === '') {\r\n    if (current === '') return result\r\n    if (depth !== 0) throw new InvalidParenthesisError({ current, depth })\r\n\r\n    result.push(current.trim())\r\n    return result\r\n  }\r\n\r\n  const length = params.length\r\n  // rome-ignore lint/correctness/noUnreachable: recursive\r\n  for (let i = 0; i < length; i++) {\r\n    const char = params[i]\r\n    const tail = params.slice(i + 1)\r\n    switch (char) {\r\n      case ',':\r\n        return depth === 0\r\n          ? splitParameters(tail, [...result, current.trim()])\r\n          : splitParameters(tail, result, `${current}${char}`, depth)\r\n      case '(':\r\n        return splitParameters(tail, result, `${current}${char}`, depth + 1)\r\n      case ')':\r\n        return splitParameters(tail, result, `${current}${char}`, depth - 1)\r\n      default:\r\n        return splitParameters(tail, result, `${current}${char}`, depth)\r\n    }\r\n  }\r\n\r\n  return []\r\n}\r\n\r\nexport function isSolidityType(\r\n  type: string,\r\n): type is Exclude<AbiType, SolidityTuple | SolidityArray> {\r\n  return (\r\n    type === 'address' ||\r\n    type === 'bool' ||\r\n    type === 'function' ||\r\n    type === 'string' ||\r\n    bytesRegex.test(type) ||\r\n    integerRegex.test(type)\r\n  )\r\n}\r\n\r\nconst protectedKeywordsRegex =\r\n  /^(?:after|alias|anonymous|apply|auto|byte|calldata|case|catch|constant|copyof|default|defined|error|event|external|false|final|function|immutable|implements|in|indexed|inline|internal|let|mapping|match|memory|mutable|null|of|override|partial|private|promise|public|pure|reference|relocatable|return|returns|sizeof|static|storage|struct|super|supports|switch|this|true|try|typedef|typeof|var|view|virtual)$/\r\n\r\nexport function isSolidityKeyword(name: string) {\r\n  return (\r\n    name === 'address' ||\r\n    name === 'bool' ||\r\n    name === 'function' ||\r\n    name === 'string' ||\r\n    name === 'tuple' ||\r\n    bytesRegex.test(name) ||\r\n    integerRegex.test(name) ||\r\n    protectedKeywordsRegex.test(name)\r\n  )\r\n}\r\n\r\nexport function isValidDataLocation(\r\n  type: string,\r\n  isArray: boolean,\r\n): type is Exclude<\r\n  AbiType,\r\n  SolidityString | Extract<SolidityBytes, 'bytes'> | SolidityArray\r\n> {\r\n  return isArray || type === 'bytes' || type === 'string' || type === 'tuple'\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}