{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.narrow = void 0;\nfunction narrow(value) {\n  return value;\n}\nexports.narrow = narrow;","map":{"version":3,"names":["narrow","value","exports"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\Artica\\artica-repo\\frontend\\node_modules\\abitype\\src\\narrow.ts"],"sourcesContent":["/**\r\n * Infers embedded primitive type of any type\r\n *\r\n * @param T - Type to infer\r\n * @returns Embedded type of {@link TType}\r\n *\r\n * @example\r\n * type Result = Narrow<['foo', 'bar', 1]>\r\n */\r\n// s/o https://twitter.com/hd_nvim/status/1578567206190780417\r\nexport type Narrow<TType> =\r\n  | (TType extends Function ? TType : never)\r\n  | (TType extends string | number | boolean | bigint ? TType : never)\r\n  | (TType extends [] ? [] : never)\r\n  | {\r\n      [K in keyof TType]: Narrow<TType[K]>\r\n    }\r\n\r\n/**\r\n * Infers embedded primitive type of any type\r\n * Same as `as const` but without setting the object as readonly and without needing the user to use it.\r\n *\r\n * @param value - Value to infer\r\n * @returns Value with embedded type inferred\r\n *\r\n * @example\r\n * const result = narrow(['foo', 'bar', 1])\r\n */\r\nexport function narrow<TType>(value: Narrow<TType>) {\r\n  return value\r\n}\r\n"],"mappings":";;;;;;AA4BA,SAAgBA,MAAMA,CAAQC,KAAoB;EAChD,OAAOA,KAAK;AACd;AAFAC,OAAA,CAAAF,MAAA,GAAAA,MAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}