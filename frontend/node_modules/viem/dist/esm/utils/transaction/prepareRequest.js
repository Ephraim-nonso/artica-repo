import { parseAccount } from '../../accounts/utils/parseAccount.js';
import { internal_estimateFeesPerGas } from '../../actions/public/estimateFeesPerGas.js';
import { estimateGas, } from '../../actions/public/estimateGas.js';
import { getBlock } from '../../actions/public/getBlock.js';
import { getTransactionCount } from '../../actions/public/getTransactionCount.js';
import { AccountNotFoundError } from '../../errors/account.js';
import { Eip1559FeesNotSupportedError, MaxFeePerGasTooLowError, } from '../../errors/fee.js';
import {} from '../index.js';
import { assertRequest } from './assertRequest.js';
export async function prepareRequest(client, args) {
    const { account: account_, chain, gas, gasPrice, nonce } = args;
    if (!account_)
        throw new AccountNotFoundError();
    const account = parseAccount(account_);
    const block = await getBlock(client, { blockTag: 'latest' });
    const request = { ...args, from: account.address };
    if (typeof nonce === 'undefined')
        request.nonce = await getTransactionCount(client, {
            address: account.address,
            blockTag: 'pending',
        });
    if (typeof block.baseFeePerGas === 'bigint' &&
        typeof gasPrice === 'undefined') {
        // EIP-1559 fees
        const { maxFeePerGas, maxPriorityFeePerGas } = await internal_estimateFeesPerGas(client, {
            block,
            chain,
            request: request,
        });
        if (typeof args.maxPriorityFeePerGas === 'undefined' &&
            args.maxFeePerGas &&
            args.maxFeePerGas < maxPriorityFeePerGas)
            throw new MaxFeePerGasTooLowError({
                maxPriorityFeePerGas,
            });
        request.maxPriorityFeePerGas = maxPriorityFeePerGas;
        request.maxFeePerGas = args.maxFeePerGas ?? maxFeePerGas;
    }
    else if (typeof gasPrice === 'undefined') {
        // Legacy fees
        if (typeof args.maxFeePerGas !== 'undefined' ||
            typeof args.maxPriorityFeePerGas !== 'undefined')
            throw new Eip1559FeesNotSupportedError();
        const { gasPrice: gasPrice_ } = await internal_estimateFeesPerGas(client, {
            block,
            chain,
            request: request,
            type: 'legacy',
        });
        request.gasPrice = gasPrice_;
    }
    if (typeof gas === 'undefined')
        request.gas = await estimateGas(client, {
            ...request,
            account: { address: account.address, type: 'json-rpc' },
        });
    assertRequest(request);
    return request;
}
//# sourceMappingURL=prepareRequest.js.map